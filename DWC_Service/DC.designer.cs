#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DWC_Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="User")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertShoppingCartBridge(ShoppingCartBridge instance);
    partial void UpdateShoppingCartBridge(ShoppingCartBridge instance);
    partial void DeleteShoppingCartBridge(ShoppingCartBridge instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertShoppingCart(ShoppingCart instance);
    partial void UpdateShoppingCart(ShoppingCart instance);
    partial void DeleteShoppingCart(ShoppingCart instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UserConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ShoppingCartBridge> ShoppingCartBridges
		{
			get
			{
				return this.GetTable<ShoppingCartBridge>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this.GetTable<ShoppingCart>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCartBridge")]
	public partial class ShoppingCartBridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Bridge_Id;
		
		private int _Product_ID;
		
		private int _Cart_ID;
		
		private int _Bridge_Quantity;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBridge_IdChanging(int value);
    partial void OnBridge_IdChanged();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnCart_IDChanging(int value);
    partial void OnCart_IDChanged();
    partial void OnBridge_QuantityChanging(int value);
    partial void OnBridge_QuantityChanged();
    #endregion
		
		public ShoppingCartBridge()
		{
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bridge_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bridge_Id
		{
			get
			{
				return this._Bridge_Id;
			}
			set
			{
				if ((this._Bridge_Id != value))
				{
					this.OnBridge_IdChanging(value);
					this.SendPropertyChanging();
					this._Bridge_Id = value;
					this.SendPropertyChanged("Bridge_Id");
					this.OnBridge_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int NOT NULL")]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", DbType="Int NOT NULL")]
		public int Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bridge_Quantity", DbType="Int NOT NULL")]
		public int Bridge_Quantity
		{
			get
			{
				return this._Bridge_Quantity;
			}
			set
			{
				if ((this._Bridge_Quantity != value))
				{
					this.OnBridge_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Bridge_Quantity = value;
					this.SendPropertyChanged("Bridge_Quantity");
					this.OnBridge_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartBridge", Storage="_ShoppingCart", ThisKey="Cart_ID", OtherKey="Cart_ID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.ShoppingCartBridges.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.ShoppingCartBridges.Add(this);
						this._Cart_ID = value.Cart_ID;
					}
					else
					{
						this._Cart_ID = default(int);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShoppingCartBridge", Storage="_Product", ThisKey="Product_ID", OtherKey="Product_Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ShoppingCartBridges.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ShoppingCartBridges.Add(this);
						this._Product_ID = value.Product_Id;
					}
					else
					{
						this._Product_ID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _Customer_StreetName_No;
		
		private string _Customer_Suburb;
		
		private string _Customer_Province;
		
		private string _Customer_PostCode;
		
		private EntitySet<ShoppingCart> _ShoppingCarts;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnCustomer_StreetName_NoChanging(string value);
    partial void OnCustomer_StreetName_NoChanged();
    partial void OnCustomer_SuburbChanging(string value);
    partial void OnCustomer_SuburbChanged();
    partial void OnCustomer_ProvinceChanging(string value);
    partial void OnCustomer_ProvinceChanged();
    partial void OnCustomer_PostCodeChanging(string value);
    partial void OnCustomer_PostCodeChanged();
    #endregion
		
		public Customer()
		{
			this._ShoppingCarts = new EntitySet<ShoppingCart>(new Action<ShoppingCart>(this.attach_ShoppingCarts), new Action<ShoppingCart>(this.detach_ShoppingCarts));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Customer_StreetName&No]", Storage="_Customer_StreetName_No", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_StreetName_No
		{
			get
			{
				return this._Customer_StreetName_No;
			}
			set
			{
				if ((this._Customer_StreetName_No != value))
				{
					this.OnCustomer_StreetName_NoChanging(value);
					this.SendPropertyChanging();
					this._Customer_StreetName_No = value;
					this.SendPropertyChanged("Customer_StreetName_No");
					this.OnCustomer_StreetName_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Suburb", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Suburb
		{
			get
			{
				return this._Customer_Suburb;
			}
			set
			{
				if ((this._Customer_Suburb != value))
				{
					this.OnCustomer_SuburbChanging(value);
					this.SendPropertyChanging();
					this._Customer_Suburb = value;
					this.SendPropertyChanged("Customer_Suburb");
					this.OnCustomer_SuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Province", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Customer_Province
		{
			get
			{
				return this._Customer_Province;
			}
			set
			{
				if ((this._Customer_Province != value))
				{
					this.OnCustomer_ProvinceChanging(value);
					this.SendPropertyChanging();
					this._Customer_Province = value;
					this.SendPropertyChanged("Customer_Province");
					this.OnCustomer_ProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_PostCode", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Customer_PostCode
		{
			get
			{
				return this._Customer_PostCode;
			}
			set
			{
				if ((this._Customer_PostCode != value))
				{
					this.OnCustomer_PostCodeChanging(value);
					this.SendPropertyChanging();
					this._Customer_PostCode = value;
					this.SendPropertyChanged("Customer_PostCode");
					this.OnCustomer_PostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ShoppingCart", Storage="_ShoppingCarts", ThisKey="User_Id", OtherKey="USER_Id")]
		public EntitySet<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this._ShoppingCarts;
			}
			set
			{
				this._ShoppingCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="User_Id", OtherKey="User_ID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Customer", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Customer = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCart")]
	public partial class ShoppingCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cart_ID;
		
		private int _USER_Id;
		
		private bool _Cart_Status;
		
		private decimal _Cart_Total;
		
		private EntitySet<ShoppingCartBridge> _ShoppingCartBridges;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCart_IDChanging(int value);
    partial void OnCart_IDChanged();
    partial void OnUSER_IdChanging(int value);
    partial void OnUSER_IdChanged();
    partial void OnCart_StatusChanging(bool value);
    partial void OnCart_StatusChanged();
    partial void OnCart_TotalChanging(decimal value);
    partial void OnCart_TotalChanged();
    #endregion
		
		public ShoppingCart()
		{
			this._ShoppingCartBridges = new EntitySet<ShoppingCartBridge>(new Action<ShoppingCartBridge>(this.attach_ShoppingCartBridges), new Action<ShoppingCartBridge>(this.detach_ShoppingCartBridges));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Id", DbType="Int NOT NULL")]
		public int USER_Id
		{
			get
			{
				return this._USER_Id;
			}
			set
			{
				if ((this._USER_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSER_IdChanging(value);
					this.SendPropertyChanging();
					this._USER_Id = value;
					this.SendPropertyChanged("USER_Id");
					this.OnUSER_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_Status", DbType="Bit NOT NULL")]
		public bool Cart_Status
		{
			get
			{
				return this._Cart_Status;
			}
			set
			{
				if ((this._Cart_Status != value))
				{
					this.OnCart_StatusChanging(value);
					this.SendPropertyChanging();
					this._Cart_Status = value;
					this.SendPropertyChanged("Cart_Status");
					this.OnCart_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_Total", DbType="Decimal(18,0) NOT NULL")]
		public decimal Cart_Total
		{
			get
			{
				return this._Cart_Total;
			}
			set
			{
				if ((this._Cart_Total != value))
				{
					this.OnCart_TotalChanging(value);
					this.SendPropertyChanging();
					this._Cart_Total = value;
					this.SendPropertyChanged("Cart_Total");
					this.OnCart_TotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartBridge", Storage="_ShoppingCartBridges", ThisKey="Cart_ID", OtherKey="Cart_ID")]
		public EntitySet<ShoppingCartBridge> ShoppingCartBridges
		{
			get
			{
				return this._ShoppingCartBridges;
			}
			set
			{
				this._ShoppingCartBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_Invoice", Storage="_Invoices", ThisKey="Cart_ID", OtherKey="Cart_Id")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ShoppingCart", Storage="_Customer", ThisKey="USER_Id", OtherKey="User_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ShoppingCarts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ShoppingCarts.Add(this);
						this._USER_Id = value.User_Id;
					}
					else
					{
						this._USER_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCartBridges(ShoppingCartBridge entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_ShoppingCartBridges(ShoppingCartBridge entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Invoice_No;
		
		private string _Invoice_TAXNo;
		
		private System.DateTime _Invioce_Date;
		
		private decimal _Invioce_TotalAmount;
		
		private int _User_ID;
		
		private int _Cart_Id;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_NoChanging(int value);
    partial void OnInvoice_NoChanged();
    partial void OnInvoice_TAXNoChanging(string value);
    partial void OnInvoice_TAXNoChanged();
    partial void OnInvioce_DateChanging(System.DateTime value);
    partial void OnInvioce_DateChanged();
    partial void OnInvioce_TotalAmountChanging(decimal value);
    partial void OnInvioce_TotalAmountChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnCart_IdChanging(int value);
    partial void OnCart_IdChanged();
    #endregion
		
		public Invoice()
		{
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Invoice_No
		{
			get
			{
				return this._Invoice_No;
			}
			set
			{
				if ((this._Invoice_No != value))
				{
					this.OnInvoice_NoChanging(value);
					this.SendPropertyChanging();
					this._Invoice_No = value;
					this.SendPropertyChanged("Invoice_No");
					this.OnInvoice_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_TAXNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Invoice_TAXNo
		{
			get
			{
				return this._Invoice_TAXNo;
			}
			set
			{
				if ((this._Invoice_TAXNo != value))
				{
					this.OnInvoice_TAXNoChanging(value);
					this.SendPropertyChanging();
					this._Invoice_TAXNo = value;
					this.SendPropertyChanged("Invoice_TAXNo");
					this.OnInvoice_TAXNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invioce_Date", DbType="Date NOT NULL")]
		public System.DateTime Invioce_Date
		{
			get
			{
				return this._Invioce_Date;
			}
			set
			{
				if ((this._Invioce_Date != value))
				{
					this.OnInvioce_DateChanging(value);
					this.SendPropertyChanging();
					this._Invioce_Date = value;
					this.SendPropertyChanged("Invioce_Date");
					this.OnInvioce_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invioce_TotalAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Invioce_TotalAmount
		{
			get
			{
				return this._Invioce_TotalAmount;
			}
			set
			{
				if ((this._Invioce_TotalAmount != value))
				{
					this.OnInvioce_TotalAmountChanging(value);
					this.SendPropertyChanging();
					this._Invioce_TotalAmount = value;
					this.SendPropertyChanged("Invioce_TotalAmount");
					this.OnInvioce_TotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_Id", DbType="Int NOT NULL")]
		public int Cart_Id
		{
			get
			{
				return this._Cart_Id;
			}
			set
			{
				if ((this._Cart_Id != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCart_IdChanging(value);
					this.SendPropertyChanging();
					this._Cart_Id = value;
					this.SendPropertyChanged("Cart_Id");
					this.OnCart_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_Invoice", Storage="_ShoppingCart", ThisKey="Cart_Id", OtherKey="Cart_ID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._Cart_Id = value.Cart_ID;
					}
					else
					{
						this._Cart_Id = default(int);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="User_ID", OtherKey="User_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._User_ID = value.User_Id;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _User_Name;
		
		private string _User_Surname;
		
		private string _User_Email;
		
		private string _User_PhoneNo;
		
		private string _User_Password;
		
		private int _User_Type;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_SurnameChanging(string value);
    partial void OnUser_SurnameChanged();
    partial void OnUser_EmailChanging(string value);
    partial void OnUser_EmailChanged();
    partial void OnUser_PhoneNoChanging(string value);
    partial void OnUser_PhoneNoChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    partial void OnUser_TypeChanging(int value);
    partial void OnUser_TypeChanged();
    #endregion
		
		public User()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Surname
		{
			get
			{
				return this._User_Surname;
			}
			set
			{
				if ((this._User_Surname != value))
				{
					this.OnUser_SurnameChanging(value);
					this.SendPropertyChanging();
					this._User_Surname = value;
					this.SendPropertyChanged("User_Surname");
					this.OnUser_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Email
		{
			get
			{
				return this._User_Email;
			}
			set
			{
				if ((this._User_Email != value))
				{
					this.OnUser_EmailChanging(value);
					this.SendPropertyChanging();
					this._User_Email = value;
					this.SendPropertyChanged("User_Email");
					this.OnUser_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_PhoneNo", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string User_PhoneNo
		{
			get
			{
				return this._User_PhoneNo;
			}
			set
			{
				if ((this._User_PhoneNo != value))
				{
					this.OnUser_PhoneNoChanging(value);
					this.SendPropertyChanging();
					this._User_PhoneNo = value;
					this.SendPropertyChanged("User_PhoneNo");
					this.OnUser_PhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Type", DbType="Int NOT NULL")]
		public int User_Type
		{
			get
			{
				return this._User_Type;
			}
			set
			{
				if ((this._User_Type != value))
				{
					this.OnUser_TypeChanging(value);
					this.SendPropertyChanging();
					this._User_Type = value;
					this.SendPropertyChanged("User_Type");
					this.OnUser_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Customer", Storage="_Customer", ThisKey="User_Id", OtherKey="User_Id", IsUnique=true, IsForeignKey=false)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.User = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_Id;
		
		private string _Product_Name;
		
		private string _Product_Category;
		
		private string _Product_Description;
		
		private decimal _Product_Price;
		
		private int _Product_Quantity;
		
		private bool _Product_DiscountStatus;
		
		private decimal _Product_DiscountAmount;
		
		private string _Product_Image;
		
		private bool _Product_Availability;
		
		private EntitySet<ShoppingCartBridge> _ShoppingCartBridges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnProduct_NameChanging(string value);
    partial void OnProduct_NameChanged();
    partial void OnProduct_CategoryChanging(string value);
    partial void OnProduct_CategoryChanged();
    partial void OnProduct_DescriptionChanging(string value);
    partial void OnProduct_DescriptionChanged();
    partial void OnProduct_PriceChanging(decimal value);
    partial void OnProduct_PriceChanged();
    partial void OnProduct_QuantityChanging(int value);
    partial void OnProduct_QuantityChanged();
    partial void OnProduct_DiscountStatusChanging(bool value);
    partial void OnProduct_DiscountStatusChanged();
    partial void OnProduct_DiscountAmountChanging(decimal value);
    partial void OnProduct_DiscountAmountChanged();
    partial void OnProduct_ImageChanging(string value);
    partial void OnProduct_ImageChanged();
    partial void OnProduct_AvailabilityChanging(bool value);
    partial void OnProduct_AvailabilityChanged();
    #endregion
		
		public Product()
		{
			this._ShoppingCartBridges = new EntitySet<ShoppingCartBridge>(new Action<ShoppingCartBridge>(this.attach_ShoppingCartBridges), new Action<ShoppingCartBridge>(this.detach_ShoppingCartBridges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this.OnProduct_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Name = value;
					this.SendPropertyChanged("Product_Name");
					this.OnProduct_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Category
		{
			get
			{
				return this._Product_Category;
			}
			set
			{
				if ((this._Product_Category != value))
				{
					this.OnProduct_CategoryChanging(value);
					this.SendPropertyChanging();
					this._Product_Category = value;
					this.SendPropertyChanged("Product_Category");
					this.OnProduct_CategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Description
		{
			get
			{
				return this._Product_Description;
			}
			set
			{
				if ((this._Product_Description != value))
				{
					this.OnProduct_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Product_Description = value;
					this.SendPropertyChanged("Product_Description");
					this.OnProduct_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Product_Price
		{
			get
			{
				return this._Product_Price;
			}
			set
			{
				if ((this._Product_Price != value))
				{
					this.OnProduct_PriceChanging(value);
					this.SendPropertyChanging();
					this._Product_Price = value;
					this.SendPropertyChanged("Product_Price");
					this.OnProduct_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Quantity", DbType="Int NOT NULL")]
		public int Product_Quantity
		{
			get
			{
				return this._Product_Quantity;
			}
			set
			{
				if ((this._Product_Quantity != value))
				{
					this.OnProduct_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Product_Quantity = value;
					this.SendPropertyChanged("Product_Quantity");
					this.OnProduct_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_DiscountStatus", DbType="Bit NOT NULL")]
		public bool Product_DiscountStatus
		{
			get
			{
				return this._Product_DiscountStatus;
			}
			set
			{
				if ((this._Product_DiscountStatus != value))
				{
					this.OnProduct_DiscountStatusChanging(value);
					this.SendPropertyChanging();
					this._Product_DiscountStatus = value;
					this.SendPropertyChanged("Product_DiscountStatus");
					this.OnProduct_DiscountStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_DiscountAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Product_DiscountAmount
		{
			get
			{
				return this._Product_DiscountAmount;
			}
			set
			{
				if ((this._Product_DiscountAmount != value))
				{
					this.OnProduct_DiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._Product_DiscountAmount = value;
					this.SendPropertyChanged("Product_DiscountAmount");
					this.OnProduct_DiscountAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Image", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Image
		{
			get
			{
				return this._Product_Image;
			}
			set
			{
				if ((this._Product_Image != value))
				{
					this.OnProduct_ImageChanging(value);
					this.SendPropertyChanging();
					this._Product_Image = value;
					this.SendPropertyChanged("Product_Image");
					this.OnProduct_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Availability", DbType="Bit NOT NULL")]
		public bool Product_Availability
		{
			get
			{
				return this._Product_Availability;
			}
			set
			{
				if ((this._Product_Availability != value))
				{
					this.OnProduct_AvailabilityChanging(value);
					this.SendPropertyChanging();
					this._Product_Availability = value;
					this.SendPropertyChanged("Product_Availability");
					this.OnProduct_AvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShoppingCartBridge", Storage="_ShoppingCartBridges", ThisKey="Product_Id", OtherKey="Product_ID")]
		public EntitySet<ShoppingCartBridge> ShoppingCartBridges
		{
			get
			{
				return this._ShoppingCartBridges;
			}
			set
			{
				this._ShoppingCartBridges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCartBridges(ShoppingCartBridge entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ShoppingCartBridges(ShoppingCartBridge entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
}
#pragma warning restore 1591
